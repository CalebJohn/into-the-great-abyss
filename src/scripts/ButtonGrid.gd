#Needs a lot of custom functionality to manage insantiating buttons
#and to manage button sizes and whatnot
extends GridContainer

#set up callback to be connected to
signal child_pressed
#loads up the button scene to be instanced in the map
var buttonPrototype = load("res://src/scenes/MapButton.tscn")
var numWidth = 5
var numHeight = 5
var buttonSize;


func _ready():
	self.columns = numWidth
	#set up button properties
	#Godot adds buttons depth first
	for i in range(numHeight):
		for j in range(numWidth):
			var button = buttonPrototype.instance()
			buttonSize = self.rect_size/Vector2(numWidth, numHeight)
			button.rect_min_size = buttonSize
			button.material.set_shader_param("cTexture", get_parent().get_node("Generator").cloudTexture)
			#meta is a string based property that can be assigned to any object
			#in our case we will use it to store the position in map coordinates
			button.position =  Vector2(j, i)
			add_child(button)



#called from child when it is presed
#so far all this does is signal the generator to update the cloud mask
#generated by connect button in editor
func _on_ButtonGrid_child_pressed(pos):
	var screenPos = Vector2(100, 100) + pos * buttonSize + buttonSize * 0.5
	get_parent().get_node("Generator").apply_mask(screenPos)
	global.basePosition = Vector2(100, 100) + pos * buttonSize
	global.baseSize = buttonSize

